<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentMustNotBeEmpty" xml:space="preserve">
    <value>The provided string argument must not be empty..</value>
  </data>
  <data name="BankingValidationResult_ObjectType" xml:space="preserve">
    <value>Validation Object Type</value>
  </data>
  <data name="BankingValidationResult_ResultType" xml:space="preserve">
    <value>Validation Result Type</value>
  </data>
  <data name="exception_NotMapFoundForTypeAdapter" xml:space="preserve">
    <value>Not mapped found for type {0} to type {1}</value>
  </data>
  <data name="exception_RegisterTypeMapConfigurationElementInvalidTypeValue" xml:space="preserve">
    <value>The type is not a fully qualified assembly name</value>
  </data>
  <data name="exception_RegisterTypesMapConfigurationInvalidType" xml:space="preserve">
    <value>Failure type, expected is RegisterTypesMapConfigurationElement</value>
  </data>
  <data name="ParameterCheck_Between" xml:space="preserve">
    <value>El valor del parámetro {0} debe estar entre {1} y {2}.</value>
  </data>
  <data name="ParameterCheck_BetweenNotEqual" xml:space="preserve">
    <value>El valor del parámetro {0} debe estar entre {1} y {2} y no puede ser igual a {3}.</value>
  </data>
  <data name="ParameterCheck_DirectoryNotExists" xml:space="preserve">
    <value>La ruta de directorio especificada {0} no existe.</value>
  </data>
  <data name="ParameterCheck_FileNotExists" xml:space="preserve">
    <value>La ruta de archivo especificada {0} no existe.</value>
  </data>
  <data name="ParameterCheck_Ip4Address" xml:space="preserve">
    <value>El valor del parámetro {0} no es una dirección IP4 legal.</value>
  </data>
  <data name="ParameterCheck_IsFilePath" xml:space="preserve">
    <value>La ruta de archivo especificada {0} es ilegal.</value>
  </data>
  <data name="ParameterCheck_Match" xml:space="preserve">
    <value>El parámetro {0} no coincide con el formato {1}.</value>
  </data>
  <data name="ParameterCheck_Match2" xml:space="preserve">
    <value>El formato del parámetro {0} no es válido.</value>
  </data>
  <data name="ParameterCheck_NotEmpty_Guid" xml:space="preserve">
    <value>El valor del parámetro {0} no puede ser Guid.Empty</value>
  </data>
  <data name="ParameterCheck_NotEqual" xml:space="preserve">
    <value>El parámetro {0} no puede ser igual a {1}.</value>
  </data>
  <data name="ParameterCheck_NotGreaterThan" xml:space="preserve">
    <value>El valor del parámetro {0} debe ser mayor que {1}.</value>
  </data>
  <data name="ParameterCheck_NotGreaterThanOrEqual" xml:space="preserve">
    <value>El valor del parámetro {0} debe ser mayor o igual que {1}.</value>
  </data>
  <data name="ParameterCheck_NotLessThan" xml:space="preserve">
    <value>El valor del parámetro {0} debe ser menor que {1}.</value>
  </data>
  <data name="ParameterCheck_NotLessThanOrEqual" xml:space="preserve">
    <value>El valor del parámetro {0} debe ser menor o igual que {1}.</value>
  </data>
  <data name="ParameterCheck_NotNull" xml:space="preserve">
    <value>El parámetro {0} no puede ser una referencia nula.</value>
  </data>
  <data name="ParameterCheck_NotNullOrEmpty_Collection" xml:space="preserve">
    <value>El parámetro {0} no puede ser una referencia nula o una colección vacía.</value>
  </data>
  <data name="ParameterCheck_NotNullOrEmpty_String" xml:space="preserve">
    <value>El parámetro {0} no puede ser una referencia nula o una cadena vacía.</value>
  </data>
  <data name="ParameterCheck_Port" xml:space="preserve">
    <value>El valor del parámetro {0} no es un puerto válido.</value>
  </data>
  <data name="ParameterCheck_StringLength" xml:space="preserve">
    <value>La longitud del parámetro {0} debe ser {1}.</value>
  </data>
  <data name="ParameterCheck_Url" xml:space="preserve">
    <value>El valor del parámetro {0} no es una URL legal.</value>
  </data>
  <data name="Security_DES_KeyLenght" xml:space="preserve">
    <value>La clave del parámetro debe tener 8 o 24 de longitud y actualmente es {0}.</value>
  </data>
  <data name="Security_RSA_Sign_HashType" xml:space="preserve">
    <value>El parámetro hashType debe ser MD5 o SHA1</value>
  </data>
  <data name="TestContextWithTimer_BeginTimer" xml:space="preserve">
    <value>Timer Name: {0}</value>
  </data>
  <data name="TestContextWithTimer_EndTime" xml:space="preserve">
    <value>End Time: {0}</value>
  </data>
  <data name="TestContextWithTimer_StartTime" xml:space="preserve">
    <value>Start Time: {0}</value>
  </data>
  <data name="TestContextWithTimer_TimerDuration" xml:space="preserve">
    <value>Timer Duration: {0}</value>
  </data>
  <data name="TypesAreNotAssignable" xml:space="preserve">
    <value>The constructor {1} selected for type {0} has ref or out parameters. Such parameters are not supported for constructor injection.</value>
  </data>
  <data name="UnknownType" xml:space="preserve">
    <value>&amp;lt;unknown&amp;gt;</value>
  </data>
</root>