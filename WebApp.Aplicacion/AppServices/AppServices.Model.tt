<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF6.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#

const string inputFile = @"..\..\WebApp.Datos\DataModel\DatabaseModel.edmx";

var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var    fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
    return string.Empty;
}

//WriteHeader(codeStringGenerator, fileManager);

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
    fileManager.StartNewFile(entity.Name + "AppService.cs");
    BeginNamespace(code);
#>
<#=codeStringGenerator.UsingDirectives(inHeader: false)#>
<#=codeStringGenerator.EntityClassOpening(entity)#>AppService : I<#=entity.Name#>AppService
{
    #region Fields
    
    private IUnitOfWorkAsync _unitOfWorkAsync;
    private readonly I<#=entity.Name#>Repository _repository<#=entity.Name#>;
    //public static IMapper Mapper {get; private set;}

    #endregion

    #region Constructor

    /// <summary>
    /// Create a new instance of <#=entity.Name#> application service
    /// </summary>
    /// <param name="repository">Repository dependency</param>
    public <#=entity.Name#>AppService(I<#=entity.Name#>Repository repository)
    {
        if (repository == null)
            throw new ArgumentNullException("repository", ApplicationResources.exception_WithoutRepository);
        _repository<#=entity.Name#> = repository;
    }

	/// <summary>
    /// Create a new instance of <#=entity.Name#> application service
    /// </summary>
    /// <param name="repository">Repository dependency</param>
    /// <param name="uow">IUnitOfWorkAsync dependency</param>
    public <#=entity.Name#>AppService(I<#=entity.Name#>Repository repository, IUnitOfWorkAsync uow)
    {
        if (repository == null)
            throw new ArgumentNullException("repository", ApplicationResources.exception_WithoutRepository);
        _repository<#=entity.Name#> = repository;

        if (uow == null)
            throw new ArgumentNullException("uow", ApplicationResources.exception_WithoutRepository);
        _unitOfWorkAsync = uow;
    }

    #endregion

	#region URF Public Methods

	public <#=entity.Name#> Find(params object[] keyValues)
	{
        Dominio.Entidades.<#=entity.Name#> data = null;

        try
        {
            //if (session != null)
            // _repository<#=entity.Name#>.UnitOfWork.SetConnectionDb(session.ConnectionString);

            // Domain Services?
            data = _repository<#=entity.Name#>.Find(keyValues);
        }
        catch (Exception ex)
        {
            //LoggerFactory.CreateLog().Error(ex);
        }  

        //LoggerFactory.CreateLog().Stop();
    
        //return Mapper.Map<<#=entity.Name#>>(data);
		return data;
	}

	public bool Insert(<#=entity.Name#> item, Session session = null)
	{
        //LoggerFactory.CreateLog().Start();
        var committed = 0;

        try
        {
            //if (session != null)
            //    _repository<#=entity.Name#>.UnitOfWork.SetConnectionDb(session.ConnectionString);

            if (item == null)
                throw new ArgumentNullException("item");

            var validator = EntityValidatorFactory.CreateValidator();
            if (validator.IsValid(item))
            {
                // Domain Services?
                //_repository<#=entity.Name#>.Insert(Mapper.Map<Dominio.Entidades.<#=entity.Name#>>(item));
                _repository<#=entity.Name#>.Insert(item);
                committed = _unitOfWorkAsync.SaveChanges();
            }
            else
                throw new ApplicationValidationErrorsException(validator.GetInvalidMessages(item));
        }
        catch (Exception ex)
        {
            //LoggerFactory.CreateLog().Error(ex);
        }  

        //LoggerFactory.CreateLog().Stop();    
        return committed > 0;		
	}

	public bool Update(<#=entity.Name#> item, Session session = null)
	{ 
        //LoggerFactory.CreateLog().Start();
        var committed = 0;

        try
        {
            //if (session != null)
            //    _repository<#=entity.Name#>.UnitOfWork.SetConnectionDb(session.ConnectionString);
        
            if (item == null)
                throw new ArgumentNullException("item");

            var validator = EntityValidatorFactory.CreateValidator();
            if (validator.IsValid(item))
            {
                // Domain Services?
                //_repository<#=entity.Name#>.Update(Mapper.Map<Dominio.Entidades.<#=entity.Name#>>(item));
                _repository<#=entity.Name#>.Update(item);
                committed = _unitOfWorkAsync.SaveChanges();
            }
            else
                throw new ApplicationValidationErrorsException(validator.GetInvalidMessages(item));
        }
        catch (Exception ex)
        {
            //LoggerFactory.CreateLog().Error(ex);
        }  

        //LoggerFactory.CreateLog().Stop();    
		//_repository<#=entity.Name#>.Update(entity); 
        return committed > 0;
	}

	public void Delete(object id) 
	{ 
        //LoggerFactory.CreateLog().Start();
        var committed = 0;

        try
        {
            //if (session != null)
            //    _repository<#=entity.Name#>.UnitOfWork.SetConnectionDb(session.ConnectionString);

            if (id == null)
                throw new ArgumentNullException("id");

            // Domain Services?
            _repository<#=entity.Name#>.Delete(id);
			committed = _unitOfWorkAsync.SaveChanges();
        }
        catch (Exception ex)
        {
            //LoggerFactory.CreateLog().Error(ex);
        }  

        //LoggerFactory.CreateLog().Stop();    
		//_repository<#=entity.Name#>.Delete(id);
        //return committed > 0;
        return;
	}

	public bool Delete(<#=entity.Name#> item, Session session = null) 
	{ 
        //LoggerFactory.CreateLog().Start();
        var committed = 0;

        try
        {
            //if (session != null)
            //    _repository<#=entity.Name#>.UnitOfWork.SetConnectionDb(session.ConnectionString);

            if (item == null)
                throw new ArgumentNullException("item");

            // Domain Services?
            //_repository<#=entity.Name#>.Delete(Mapper.Map<Dominio.Entidades.<#=entity.Name#>>(item));
            _repository<#=entity.Name#>.Delete(item);
			committed = _unitOfWorkAsync.SaveChanges();
        }
        catch (Exception ex)
        {
            //LoggerFactory.CreateLog().Error(ex);
        }  

        //LoggerFactory.CreateLog().Stop();    
        return committed > 0;
	}

	public IQueryable<<#=entity.Name#>> SelectQuery(string query, params object[] parameters) 
	{ 
	return _repository<#=entity.Name#>.SelectQuery(query, parameters).AsQueryable();
	}

	public void ApplyChanges(<#=entity.Name#> entity) 
	{ 
	_repository<#=entity.Name#>.ApplyChanges(entity);
	}

	public void InsertRange(IEnumerable<<#=entity.Name#>> entities) 
	{ 
	_repository<#=entity.Name#>.InsertRange(entities);
	}

	////[Obsolete("InsertOrUpdateGraph has been deprecated.  Instead set TrackingState to Added or Modified and call ApplyChanges.")]
	//////public void InsertOrUpdateGraph(<#=entity.Name#> entity) { _repository<#=entity.Name#>.InsertOrUpdateGraph(entity); }

	////[Obsolete("InsertOrUpdateGraph has been deprecated.  Instead set TrackingState to Added or Modified and call ApplyChanges.")]
	//////public void InsertGraphRange(IEnumerable<<#=entity.Name#>> entities) { _repository<#=entity.Name#>.InsertGraphRange(entities); }

	public IQueryFluent<<#=entity.Name#>> Query() 
	{ 
	return _repository<#=entity.Name#>.Query(); 
	}

	public IQueryFluent<<#=entity.Name#>> Query(IQueryObject<<#=entity.Name#>> queryObject)
	{ 
	return _repository<#=entity.Name#>.Query(queryObject); 
	}

	public IQueryFluent<<#=entity.Name#>> Query(Expression<Func<<#=entity.Name#>, bool>> query) 
	{ 
	return _repository<#=entity.Name#>.Query(query); 
	}

	public async Task<<#=entity.Name#>> FindAsync(params object[] keyValues)
	{ 
	return await _repository<#=entity.Name#>.FindAsync(keyValues); 
	}

	public async Task<<#=entity.Name#>> FindAsync(CancellationToken cancellationToken, params object[] keyValues)
	{ 
	return await _repository<#=entity.Name#>.FindAsync(cancellationToken, keyValues);
	}

	public async Task<bool> DeleteAsync(params object[] keyValues) 
	{ 
	return await DeleteAsync(CancellationToken.None, keyValues); 
	}

	//IF 04/08/2014 - Before: return await DeleteAsync(cancellationToken, keyValues);
	public async Task<bool> DeleteAsync(CancellationToken cancellationToken, params object[] keyValues)
	{ 
	return await _repository<#=entity.Name#>.DeleteAsync(cancellationToken, keyValues);
	}

	public IQueryable<<#=entity.Name#>> Queryable() 
	{ 
	return _repository<#=entity.Name#>.Queryable();
	}

    #endregion URF

    #region Methods

    /// <summary>
    /// Select all
    /// </summary>
    /// <param name="includes">Inners</param> 
	/// <param name="session">Session</param>
	/// <returns>List of results</returns>
    public List<<#=entity.Name#>> GetAll(List<string> includes, Session session = null)
	{
        //LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Application Layer - GetAll<#=entity.Name#> Begin"));

		List<Dominio.Entidades.<#=entity.Name#>> data = null;

		try
        {
			//if (session != null)
			//	_repository<#=entity.Name#>.UnitOfWork.SetConnectionDb(session.ConnectionString);

			// Domain Services?
            //var datax = _repository<#=entity.Name#>.Queryable().ToList();
			data = _repository<#=entity.Name#>.Queryable().ToList();
		}
		catch (Exception ex)
        {
            //LoggerFactory.CreateLog().Error(string.Format(CultureInfo.InvariantCulture, "Application Layer - GetAll<#=entity.Name#> ERROR"), ex);
        }  

        //LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Application Layer - GetAll<#=entity.Name#> End"));
	
		//return Mapper.Map<List<<#=entity.Name#>>>(data);
		return data;
	}

    /// <summary>
    /// Find by filter
    /// </summary>
    /// <param name="filter">Expression filter</param>
    /// <param name="includes">Inners</param>
    /// <param name="session">Session</param>
    /// <returns>List of results</returns>
    public List<<#=entity.Name#>> FindByFilter(IEnumerable<filterRule> filter, List<string> includes, string filterRules = "", Session session = null)
    {
        //LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Application Layer - FindByFilter<#=entity.Name#> Begin"));		
		List<Dominio.Entidades.<#=entity.Name#>> data = null;

		try
        {
			//if (session != null)
			//	_repository<#=entity.Name#>.UnitOfWork.SetConnectionDb(session.ConnectionString);

			//var mapperExp = Mapper.Map<CustomQuery<Domain.BoundedContext.Entities.<#=entity.Name#>>>(filter).ToDomainExpression();

			// Domain Services?			
			//data = _repository<#=entity.Name#>.AllMatching(mapperExp, includes);
            var <#=entity.Name#>Details = _repository<#=entity.Name#>
				.Query(new <#=entity.Name#>Query().Withfilter(filter))
                .Select().ToList()
                ;
            //.OrderBy(n => n.OrderBy("Id", "Asc"))
            //.SelectPage(1, model.PageSize, out totalCount);

            data = <#=entity.Name#>Details;
		}
		catch (Exception ex)
        {
            //LoggerFactory.CreateLog().Error(string.Format(CultureInfo.InvariantCulture, "Application Layer - FindByFilter<#=entity.Name#> ERROR"), ex);
        }  

        //LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Application Layer - FindByFilter<#=entity.Name#> End"));
        //return Mapper.Map<List<<#=entity.Name#>>>(data);
        return data;
    }

    /// <summary>
    /// Find by filter paged
    /// </summary>
    /// <param name="filter">Expression filter</param>
    /// <param name="includes">Inners</param>
    /// <param name="pageGo">Go to page</param>
    /// <param name="pageSize">Items request</param>
    /// <param name="orderBy">Fields order</param>
    /// <param name="ascending">Order ascendent</param>
    /// <param name="session">Session</param>
	/// <returns>Paged results</returns>
    public PagedCollection<<#=entity.Name#>> FindPagedByFilter(IEnumerable<filterRule> filter, List<string> includes, int pageGo, int pageSize, string sort, string order ="asc", string filterRules = "", Session session = null)
    {
        //LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Application Layer - FindPagedByFilter<#=entity.Name#> Begin"));
		PagedCollection<Dominio.Entidades.<#=entity.Name#>> data = null;
		List<Dominio.Entidades.<#=entity.Name#>> items = null;
        var totalItems = 0;

		try
        {
			//if (session != null)
			//	_repository<#=entity.Name#>.UnitOfWork.SetConnectionDb(session.ConnectionString);

			//var mapperExp = Mapper.Map<CustomQuery<Domain.BoundedContext.Entities.<#=entity.Name#>>>(filter).ToDomainExpression();
		
			// Domain Services?            
			//data = _repository<#=entity.Name#>.AllMatchingPaged(mapperExp, includes, pageGo, pageSize, orderBy, ascending);
            var <#=entity.Name#>Details = _repository<#=entity.Name#>
				.Query(new <#=entity.Name#>Query().Withfilter(filter))
	            .OrderBy(n => n.OrderBy(sort, order))
                //.Select().ToList()
				.SelectPage(pageGo, pageSize, out totalItems);

			items=<#=entity.Name#>Details.ToList();
            data = new PagedCollection<<#=entity.Name#>> { PageIndex = pageGo, PageSize = pageSize, Items = items, TotalItems = totalItems };
			
		}
		catch (Exception ex)
        {
            //LoggerFactory.CreateLog().Error(string.Format(CultureInfo.InvariantCulture, "Application Layer - FindPagedByFilter<#=entity.Name#> ERROR"), ex);
        }  

        //LoggerFactory.CreateLog().Debug(string.Format(CultureInfo.InvariantCulture, "Application Layer - FindPagedByFilter<#=entity.Name#> End"));

        //return Mapper.Map<PagedCollection<<#=entity.Name#>>>(data);
		//return new PagedCollection<<<#=entity.Name#>>> { PageIndex = pageGo, PageSize = pageSize, Items = items, TotalItems = totalCount };
		return data;
    }


     #endregion Methods

}
<#
    EndNamespace(code);
}

fileManager.Process();

#>
<#+

public void WriteHeader(CodeStringGenerator codeStringGenerator, EntityFrameworkTemplateFileManager fileManager)
{
    fileManager.StartHeader();
#>
<#=codeStringGenerator.UsingDirectives(inHeader: true)#>
<#+
    fileManager.EndBlock();
}

public void BeginNamespace(CodeGenerationTools code)
{
    var codeNamespace = code.VsNamespaceSuggestion();
    if (!String.IsNullOrEmpty(codeNamespace))
    {
#>
#region Using Directives

using AutoMapper;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading;
using System.Threading.Tasks;
using WebApp.Aplicacion.Core;
//using WebApp.Aplicacion.Dtos;
using WebApp.Aplicacion.Resx;
using WebApp.Datos.Repository;
using WebApp.Dominio.Core.Repositories;
using WebApp.Dominio.Core.UnitOfWork;
using WebApp.Dominio.Entidades;
using WebApp.Dominio.IRepository;
using WebApp.Transversales;
using WebApp.Transversales.Extensions;
using WebApp.Transversales.Validator;

#endregion

namespace <#=code.EscapeNamespace(codeNamespace)#>
{
<#+
        PushIndent("    ");
    }
}

public void EndNamespace(CodeGenerationTools code)
{
    if (!String.IsNullOrEmpty(code.VsNamespaceSuggestion()))
    {
        PopIndent();
#>
}
<#+
    }
}

public const string TemplateId = "CSharp_DbContext_Types_EF6";

public class CodeStringGenerator
{
    private readonly CodeGenerationTools _code;
    private readonly TypeMapper _typeMapper;
    private readonly MetadataTools _ef;

    public CodeStringGenerator(CodeGenerationTools code, TypeMapper typeMapper, MetadataTools ef)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(typeMapper, "typeMapper");
        ArgumentNotNull(ef, "ef");

        _code = code;
        _typeMapper = typeMapper;
        _ef = ef;
    }

    public string Property(EdmProperty edmProperty)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            Accessibility.ForProperty(edmProperty),
            _typeMapper.GetTypeName(edmProperty.TypeUsage),
            _code.Escape(edmProperty),
            _code.SpaceAfter(Accessibility.ForGetter(edmProperty)),
            _code.SpaceAfter(Accessibility.ForSetter(edmProperty)));
    }

    public string NavigationProperty(NavigationProperty navProp)
    {
        var endType = _typeMapper.GetTypeName(navProp.ToEndMember.GetEntityType());
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2} {{ {3}get; {4}set; }}",
            AccessibilityAndVirtual(Accessibility.ForNavigationProperty(navProp)),
            navProp.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many ? ("ICollection<" + endType + ">") : endType,
            _code.Escape(navProp),
            _code.SpaceAfter(Accessibility.ForGetter(navProp)),
            _code.SpaceAfter(Accessibility.ForSetter(navProp)));
    }
    
    public string AccessibilityAndVirtual(string accessibility)
    {
        return accessibility + (accessibility != "private" ? " virtual" : "");
    }
    
    public string EntityClassOpening(EntityType entity)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} sealed {1}partial class {2}{3}",
            Accessibility.ForType(entity),
            _code.SpaceAfter(_code.AbstractOption(entity)),
            _code.Escape(entity),
            _code.StringBefore(" : ", _typeMapper.GetTypeName(entity.BaseType)));
    }
    
    public string EnumOpening(SimpleType enumType)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} enum {1} : {2}",
            Accessibility.ForType(enumType),
            _code.Escape(enumType),
            _code.Escape(_typeMapper.UnderlyingClrType(enumType)));
        }
    
    public void WriteFunctionParameters(EdmFunction edmFunction, Action<string, string, string, string> writeParameter)
    {
        var parameters = FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
        foreach (var parameter in parameters.Where(p => p.NeedsLocalVariable))
        {
            var isNotNull = parameter.IsNullableOfT ? parameter.FunctionParameterName + ".HasValue" : parameter.FunctionParameterName + " != null";
            var notNullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", " + parameter.FunctionParameterName + ")";
            var nullInit = "new ObjectParameter(\"" + parameter.EsqlParameterName + "\", typeof(" + TypeMapper.FixNamespaces(parameter.RawClrTypeName) + "))";
            writeParameter(parameter.LocalVariableName, isNotNull, notNullInit, nullInit);
        }
    }
    
    public string ComposableFunctionMethod(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} IQueryable<{1}> {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            _code.Escape(edmFunction),
            string.Join(", ", parameters.Select(p => TypeMapper.FixNamespaces(p.FunctionParameterType) + " " + p.FunctionParameterName).ToArray()));
    }
    
    public string ComposableCreateQuery(EdmFunction edmFunction, string modelNamespace)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<{0}>(\"[{1}].[{2}]({3})\"{4});",
            _typeMapper.GetTypeName(_typeMapper.GetReturnType(edmFunction), modelNamespace),
            edmFunction.NamespaceName,
            edmFunction.Name,
            string.Join(", ", parameters.Select(p => "@" + p.EsqlParameterName).ToArray()),
            _code.StringBefore(", ", string.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray())));
    }
    
    public string FunctionMethod(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var paramList = String.Join(", ", parameters.Select(p => TypeMapper.FixNamespaces(p.FunctionParameterType) + " " + p.FunctionParameterName).ToArray());
        if (includeMergeOption)
        {
            paramList = _code.StringAfter(paramList, ", ") + "MergeOption mergeOption";
        }

        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} {1} {2}({3})",
            AccessibilityAndVirtual(Accessibility.ForMethod(edmFunction)),
            returnType == null ? "int" : "ObjectResult<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            _code.Escape(edmFunction),
            paramList);
    }
    
    public string ExecuteFunction(EdmFunction edmFunction, string modelNamespace, bool includeMergeOption)
    {
        var parameters = _typeMapper.GetParameters(edmFunction);
        var returnType = _typeMapper.GetReturnType(edmFunction);

        var callParams = _code.StringBefore(", ", String.Join(", ", parameters.Select(p => p.ExecuteParameterName).ToArray()));
        if (includeMergeOption)
        {
            callParams = ", mergeOption" + callParams;
        }
        
        return string.Format(
            CultureInfo.InvariantCulture,
            "return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction{0}(\"{1}\"{2});",
            returnType == null ? "" : "<" + _typeMapper.GetTypeName(returnType, modelNamespace) + ">",
            edmFunction.Name,
            callParams);
    }
    
    public string DbSet(EntitySet entitySet)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            "{0} virtual DbSet<{1}> {2} {{ get; set; }}",
            Accessibility.ForReadOnlyProperty(entitySet),
            _typeMapper.GetTypeName(entitySet.ElementType),
            _code.Escape(entitySet));
    }

    public string UsingDirectives(bool inHeader, bool includeCollections = false)
    {
        return inHeader == string.IsNullOrEmpty(_code.VsNamespaceSuggestion())
            ? string.Format(
                CultureInfo.InvariantCulture,
                "{0}using System;{1}" +
                "{2}",
                inHeader ? Environment.NewLine : "",
                includeCollections ? (Environment.NewLine + "using System.Collections.Generic;") : "",
                inHeader ? "" : Environment.NewLine)
            : "";
    }
}

public class TypeMapper
{
    private const string ExternalTypeNameAttributeName = @"http://schemas.microsoft.com/ado/2006/04/codegeneration:ExternalTypeName";

    private readonly System.Collections.IList _errors;
    private readonly CodeGenerationTools _code;
    private readonly MetadataTools _ef;

    public TypeMapper(CodeGenerationTools code, MetadataTools ef, System.Collections.IList errors)
    {
        ArgumentNotNull(code, "code");
        ArgumentNotNull(ef, "ef");
        ArgumentNotNull(errors, "errors");

        _code = code;
        _ef = ef;
        _errors = errors;
    }

    public static string FixNamespaces(string typeName)
    {
        return typeName.Replace("System.Data.Spatial.", "System.Data.Entity.Spatial.");
    }

    public string GetTypeName(TypeUsage typeUsage)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace: null);
    }

    public string GetTypeName(EdmType edmType)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: null);
    }

    public string GetTypeName(TypeUsage typeUsage, string modelNamespace)
    {
        return typeUsage == null ? null : GetTypeName(typeUsage.EdmType, _ef.IsNullable(typeUsage), modelNamespace);
    }

    public string GetTypeName(EdmType edmType, string modelNamespace)
    {
        return GetTypeName(edmType, isNullable: null, modelNamespace: modelNamespace);
    }

    public string GetTypeName(EdmType edmType, bool? isNullable, string modelNamespace)
    {
        if (edmType == null)
        {
            return null;
        }

        var collectionType = edmType as CollectionType;
        if (collectionType != null)
        {
            return String.Format(CultureInfo.InvariantCulture, "ICollection<{0}>", GetTypeName(collectionType.TypeUsage, modelNamespace));
        }

        var typeName = _code.Escape(edmType.MetadataProperties
                                .Where(p => p.Name == ExternalTypeNameAttributeName)
                                .Select(p => (string)p.Value)
                                .FirstOrDefault())
            ?? (modelNamespace != null && edmType.NamespaceName != modelNamespace ?
                _code.CreateFullName(_code.EscapeNamespace(edmType.NamespaceName), _code.Escape(edmType)) :
                _code.Escape(edmType));

        if (edmType is StructuralType)
        {
            return typeName;
        }

        if (edmType is SimpleType)
        {
            var clrType = UnderlyingClrType(edmType);
            if (!IsEnumType(edmType))
            {
                typeName = _code.Escape(clrType);
            }

            typeName = FixNamespaces(typeName);

            return clrType.IsValueType && isNullable == true ?
                String.Format(CultureInfo.InvariantCulture, "Nullable<{0}>", typeName) :
                typeName;
        }

        throw new ArgumentException("edmType");
    }
    
    public Type UnderlyingClrType(EdmType edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        var primitiveType = edmType as PrimitiveType;
        if (primitiveType != null)
        {
            return primitiveType.ClrEquivalentType;
        }

        if (IsEnumType(edmType))
        {
            return GetEnumUnderlyingType(edmType).ClrEquivalentType;
        }

        return typeof(object);
    }
    
    public object GetEnumMemberValue(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var valueProperty = enumMember.GetType().GetProperty("Value");
        return valueProperty == null ? null : valueProperty.GetValue(enumMember, null);
    }
    
    public string GetEnumMemberName(MetadataItem enumMember)
    {
        ArgumentNotNull(enumMember, "enumMember");
        
        var nameProperty = enumMember.GetType().GetProperty("Name");
        return nameProperty == null ? null : (string)nameProperty.GetValue(enumMember, null);
    }

    public System.Collections.IEnumerable GetEnumMembers(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        var membersProperty = enumType.GetType().GetProperty("Members");
        return membersProperty != null 
            ? (System.Collections.IEnumerable)membersProperty.GetValue(enumType, null)
            : Enumerable.Empty<MetadataItem>();
    }
    
    public bool EnumIsFlags(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");
        
        var isFlagsProperty = enumType.GetType().GetProperty("IsFlags");
        return isFlagsProperty != null && (bool)isFlagsProperty.GetValue(enumType, null);
    }

    public bool IsEnumType(GlobalItem edmType)
    {
        ArgumentNotNull(edmType, "edmType");

        return edmType.GetType().Name == "EnumType";
    }

    public PrimitiveType GetEnumUnderlyingType(EdmType enumType)
    {
        ArgumentNotNull(enumType, "enumType");

        return (PrimitiveType)enumType.GetType().GetProperty("UnderlyingType").GetValue(enumType, null);
    }

    public string CreateLiteral(object value)
    {
        if (value == null || value.GetType() != typeof(TimeSpan))
        {
            return _code.CreateLiteral(value);
        }

        return string.Format(CultureInfo.InvariantCulture, "new TimeSpan({0})", ((TimeSpan)value).Ticks);
    }
    
    public bool VerifyCaseInsensitiveTypeUniqueness(IEnumerable<string> types, string sourceFile)
    {
        ArgumentNotNull(types, "types");
        ArgumentNotNull(sourceFile, "sourceFile");
        
        var hash = new HashSet<string>(StringComparer.InvariantCultureIgnoreCase);
        if (types.Any(item => !hash.Add(item)))
        {
            _errors.Add(
                new CompilerError(sourceFile, -1, -1, "6023",
                    String.Format(CultureInfo.CurrentCulture, CodeGenerationTools.GetResourceString("Template_CaseInsensitiveTypeConflict"))));
            return false;
        }
        return true;
    }
    
    public IEnumerable<SimpleType> GetEnumItemsToGenerate(IEnumerable<GlobalItem> itemCollection)
    {
        return GetItemsToGenerate<SimpleType>(itemCollection)
            .Where(e => IsEnumType(e));
    }
    
    public IEnumerable<T> GetItemsToGenerate<T>(IEnumerable<GlobalItem> itemCollection) where T: EdmType
    {
        return itemCollection
            .OfType<T>()
            .Where(i => !i.MetadataProperties.Any(p => p.Name == ExternalTypeNameAttributeName))
            .OrderBy(i => i.Name);
    }

    public IEnumerable<string> GetAllGlobalItems(IEnumerable<GlobalItem> itemCollection)
    {
        return itemCollection
            .Where(i => i is EntityType || i is ComplexType || i is EntityContainer || IsEnumType(i))
            .Select(g => GetGlobalItemName(g));
    }

    public string GetGlobalItemName(GlobalItem item)
    {
        if (item is EdmType)
        {
            return ((EdmType)item).Name;
        }
        else
        {
            return ((EntityContainer)item).Name;
        }
    }

    public IEnumerable<EdmProperty> GetSimpleProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetSimpleProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }
    
    public IEnumerable<EdmProperty> GetComplexProperties(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is ComplexType && p.DeclaringType == type);
    }

    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(EntityType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }
    
    public IEnumerable<EdmProperty> GetPropertiesWithDefaultValues(ComplexType type)
    {
        return type.Properties.Where(p => p.TypeUsage.EdmType is SimpleType && p.DeclaringType == type && p.DefaultValue != null);
    }

    public IEnumerable<NavigationProperty> GetNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type);
    }
    
    public IEnumerable<NavigationProperty> GetCollectionNavigationProperties(EntityType type)
    {
        return type.NavigationProperties.Where(np => np.DeclaringType == type && np.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.Many);
    }
    
    public FunctionParameter GetReturnParameter(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var returnParamsProperty = edmFunction.GetType().GetProperty("ReturnParameters");
        return returnParamsProperty == null
            ? edmFunction.ReturnParameter
            : ((IEnumerable<FunctionParameter>)returnParamsProperty.GetValue(edmFunction, null)).FirstOrDefault();
    }

    public bool IsComposable(EdmFunction edmFunction)
    {
        ArgumentNotNull(edmFunction, "edmFunction");

        var isComposableProperty = edmFunction.GetType().GetProperty("IsComposableAttribute");
        return isComposableProperty != null && (bool)isComposableProperty.GetValue(edmFunction, null);
    }

    public IEnumerable<FunctionImportParameter> GetParameters(EdmFunction edmFunction)
    {
        return FunctionImportParameter.Create(edmFunction.Parameters, _code, _ef);
    }

    public TypeUsage GetReturnType(EdmFunction edmFunction)
    {
        var returnParam = GetReturnParameter(edmFunction);
        return returnParam == null ? null : _ef.GetElementType(returnParam.TypeUsage);
    }
    
    public bool GenerateMergeOptionFunction(EdmFunction edmFunction, bool includeMergeOption)
    {
        var returnType = GetReturnType(edmFunction);
        return !includeMergeOption && returnType != null && returnType.EdmType.BuiltInTypeKind == BuiltInTypeKind.EntityType;
    }
}

public static void ArgumentNotNull<T>(T arg, string name) where T : class
{
    if (arg == null)
    {
        throw new ArgumentNullException(name);
    }
}
#>